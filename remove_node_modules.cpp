#include <filesystem>
#include <iostream>

#include "remove_node_modules.hpp"

namespace fs = std::filesystem;

void remove_node_modules(const fs::path &base_dir, bool dry_run) {
  if (!fs::exists(base_dir) || !fs::is_directory(base_dir)) {
    std::cerr << "Provided path is not a directory: " << base_dir << "\n";
    return;
  }

  for (const fs::directory_entry &entry : fs::directory_iterator(base_dir)) {
    if (!entry.is_directory()) {
      continue;
    }

    fs::path node_modules_path = entry.path() / "node_modules";
    if (!fs::exists(node_modules_path) || !fs::is_directory((node_modules_path))) {
      continue;
    }

    if (dry_run) {
      std::cout << "[Dry Run] Would delete: " << node_modules_path << "\n";
      continue;
    }

    std::cout << "Deleting: " << node_modules_path << "\n";

    try {
      std::uintmax_t removed_count = fs::remove_all(node_modules_path);
      std::cout << "\nRemoved " << removed_count << " node_modules folders.\n";
    } catch (const fs::filesystem_error &e) {
      std::cerr << "Error deleting " << node_modules_path << ": " << e.what() << "\n";
    }
  }
}